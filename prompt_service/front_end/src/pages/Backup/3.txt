import { useState } from "react";
import ChatPromptInput from "@/components/textarea.jsx";

export default function PromptToDashboard() {
  const [prompt, setPrompt] = useState("");
  const [messages, setMessages] = useState([]); // list of { role, content }
  const [isTyping, setIsTyping] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  const handleSubmit = async () => {
    if (!prompt.trim()) return;

    // Thêm message người dùng ngay lập tức
    const newMessages = [...messages, { role: "user", content: prompt }];
    setMessages(newMessages);
    setPrompt("");
    setIsTyping(true);
    setErrorMessage("");

    try {
      const response = await fetch("http://127.0.0.1:5000/fetch-url", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ body: prompt }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Something went wrong");
      }

      const data = await response.json();
      const content = data.content || "";

      // Hiệu ứng typing cho bot
      let i = 0;
      let currentBotMsg = "";

      const typeOut = () => {
        if (i < content.length) {
          currentBotMsg += content.charAt(i);
          i++;
          // Cập nhật tin nhắn bot dần dần
          setMessages([...newMessages, { role: "bot", content: currentBotMsg }]);
          setTimeout(typeOut, 30);
        } else {
          setIsTyping(false);
        }
      };

      typeOut();

    } catch (error) {
      console.error("Error sending prompt:", error.message);
      setErrorMessage(error.message);
      setIsTyping(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto py-12 px-6 space-y-6">
      {/* Hiển thị đoạn chat */}
      <div className="space-y-4">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`p-3 rounded-xl text-sm whitespace-pre-line ${
              msg.role === "user"
                ? "bg-blue-100 text-right text-gray-800 ml-auto w-fit"
                : "bg-gray-100 text-left text-gray-900 mr-auto w-fit"
            }`}
          >
            {msg.content}
          </div>
        ))}
        {isTyping && (
          <div className="text-sm text-gray-400 animate-pulse">AI đang trả lời...</div>
        )}
      </div>

      <ChatPromptInput
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        onSubmit={handleSubmit}
      />

      {errorMessage && (
        <div className="p-4 bg-red-100 border border-red-200 rounded-lg text-red-700 text-sm">
          {errorMessage}
        </div>
      )}
    </div>
  );
}
